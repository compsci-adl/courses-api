from typing import Union
import re

def meeting_date_convert(raw_date: str) -> dict[str]:
    """Converts the date format given in the meetings to "MM-DD"

    Args:
        raw_date (str): The given meeting date in the format of "DD {3-char weekday} - DD {3-char weekday}"

    Returns:
        formatted_date (dict[str]): The formatted meeting date in the format of "MM-DD" in a dict containing 
        the "start" and "end" keys and their corresponding dates
    """
    
    months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    start, end = raw_date.split(" - ")
    
    start_d, start_m = start.split()
    start_m = str(months.index(start_m) + 1).zfill(2)
    
    end_d, end_m = end.split()
    end_m = str(months.index(end_m) + 1).zfill(2)
    
    formatted_date = {
        "start": f"{start_m}-{start_d.zfill(2)}",
        "end": f"{end_m}-{end_d.zfill(2)}"
    }
    return formatted_date

def meeting_time_convert(raw_time: str) -> str:
    """Converts the time given in meetings to "HH:mm"

    Args:
        raw_time (str): The given meeting time in the format of "H{am/pm}"

    Returns:
        formatted_time (str): The formatted meeting time in the format of "HH:mm"
    """
    
    period = raw_time[-2:]
    hour = int(raw_time.replace(period, ""))
    
    if period.lower() == "pm":
        hour += 12
    
    hour = str(hour).zfill(2)
    formatted_time = f"{hour}:00"
    return formatted_time

def parse_requisites(raw_requisites: str) -> Union[dict[str], None]:
    """Takes in a string of -requisites and returns a dict containing the original string, and a list of the parsed-out subjects

    Args:
        raw_requisites (str): The raw string containing a list of -requisites, usually in the format of 
        "COMP SCI 1103, COMP SCI 2202, COMP SCI 2202B" as an example

    Returns:
        parsed_requisites (Union[dict[str], None]): Either a dict with "desc"s value being the original -requisites string and 
        "subjects" being a list of the parsed -requisites, or None if raw_requisites is None
    """
    
    if not raw_requisites:
        return None
    
    # Note: This regex pattern was generated by Claude 3.5 Sonnet, works fine in my testing though
    pattern = r'\b([A-Z]+(?:\s+[A-Z]+)*)\s+(\d{4}\w*)\b'
    matched_subjects = [" ".join(match) for match in re.findall(pattern, raw_requisites)]
    
    parsed_requisites = None
    if len(matched_subjects) > 0:
        parsed_requisites = {
            "desc": raw_requisites,
            "subjects": matched_subjects
        }
    
    return parsed_requisites

def convert_term_alias(term_alias: str) -> str:
    """Takes in a term alias and returns the CoursePlanner API name for said term

    Args:
        term_alias (str): The unconverted term, this doesn't have to be an alias in which case no conversion will be done

    Returns:
        str: The converted or original term depending on if a conversion was made
    """
    
    terms_without_digits = ("summer", "winter")
    aliases = {
        "sem": "Semester",
        "elc": "ELC Term",
        "tri": "Trimester",
        "term": "Term",
        "ol": "Online Teaching Period",
        "melb": "Melb Teaching Period",
        "pce": "PCE Term",
        "summer": "Summer School",
        "winter": "Winter School"
    }
    
    # Convert the alias, append it's digit to the end if the term needs a digit at the end
    converted_alias = aliases.get(term_alias[:-1] if term_alias[-1].isdigit() else term_alias, term_alias)
    if term_alias not in terms_without_digits and term_alias[-1].isdigit() and converted_alias != term_alias:
        converted_alias += " " + term_alias[-1]
    
    return converted_alias
